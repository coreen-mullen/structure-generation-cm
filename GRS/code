#!/Users/cmmulle/miniforge3/bin/python
import numpy as np
from ase.io import read, write
from ase import Atoms, Atom
from ase.build import bulk
import itertools 
from ase.visualize import view  
#from hnf import *

# Left softstrength out so we need a class for evaluating fingerprints and loss function
class Structure:
    def __init__(self, index, desired_size, template=None, desired_comps={'Zn': 0.5, 'O': 0.5}, use_template=None, min_typ='temp'):
        self.index = index
        self.template = template
        self.desired_size = desired_size
        self.desired_comps = desired_comps
        self.use_template = use_template
        self.min_typ = min_typ
        
# Crystalline - will have one desired_comp, use ase.build bulk 
# ASE can try to find the lattice constant if the user doesn't specify
# Wrapper function - bulk 
# Tungsten is bcc at lowest energy - make sure our function works for it
# Simple cubic, 

class crystalline_generation(Structure):
    def __init__(self, index, desired_size, template=None, desired_comps={'Zn': 0.5, 'O': 0.5}, use_template=None, min_typ='temp'):
        super().__init__(index, desired_size, template, desired_comps, use_template, min_typ)
        self.lattice_type = None
        self.shape_string = 'primitive'

    def set_lattice_type(self, lattice_type):
        self.lattice_type = lattice_type

    def set_cell_shape(self, shape_string):
        self.shape_string = shape_string

    def bulk_struct(self):
        assert self.lattice_type is not None, "You must define lattice type before using bulk_struct function."
        chems = list(self.desired_comps.keys())
        vol_base = None
        a_simp = None
        
        if self.lattice_type == 'wurtzite':
            a_simp = 3.25  
            c_simp = 5.20 
            atoms_base = bulk('ZnO', 'wurtzite', a=a_simp, c=c_simp)  
            vol_base = np.dot(np.cross(atoms_base.get_cell()[0], atoms_base.get_cell()[1]), atoms_base.get_cell()[2])
        else:
            atoms_base = bulk(chems[0], self.lattice_type)
            vol_base = np.dot(np.cross(atoms_base.get_cell()[0], atoms_base.get_cell()[1]), atoms_base.get_cell()[2])
            a_simp = vol_base**(1/3)
        cell_multiples = [combo for combo in itertools.combinations_with_replacement(range(1, 6), 3)]
        structure_multiples = []

        for combo in cell_multiples:
            if self.shape_string == 'primitive':
                bulk_struct = bulk(chems[0], crystalstructure=self.lattice_type, a=a_simp) * combo
            elif self.shape_string == 'cubic':
                bulk_struct = bulk(chems[0], crystalstructure=self.lattice_type, cubic=True, a=a_simp) * combo
            elif self.shape_string == 'orthorhombic':
                bulk_struct = bulk(chems[0], crystalstructure=self.lattice_type, orthorhombic=True, a=a_simp) * combo
            elif self.shape_string == 'hexagonal':
                bulk_struct = bulk('ZnO', 'wurtzite', a=a_simp, c=c_simp) * combo
            else:
                raise ValueError("shape_string %s is not valid. Please choose: primitive, cubic, orthorhombic, or hexagonal.")
            structure_multiples.append(bulk_struct)

        system_size = [len(i) for i in structure_multiples]
        if self.desired_size in system_size:
            index = system_size.index(self.desired_size)
            print(index)
            print(structure_multiples[index]) 
            return structure_multiples[index]
        else:
            closest_size = min((size for size in system_size if size >= self.desired_size), default=None)
            if closest_size is not None:
                index = system_size.index(closest_size)
                print('Desired size not found, Closest:', closest_size)
                print('Structure:', structure_multiples[index])
                return structure_multiples[index]
            else:
                closest_size_l = max((size for size in system_size if size < self.desired_size), default=None)
                if closest_size_l is not None:
                    index = system_size.index(closest_size_l)
                    print("No exact match and no larger size. Closest:", closest_size_l)
                    print("Structure:", structure_multiples[index])
                    return structure_multiples[index]
                return None

# TODO: Look up conventional vs. primitive, try it out for: diamond, wurtzite
# TODO: Code needs to work for different crystal structures bcc, fcc, sc
# TODO: Implement structures like hcp for subclass.

def test_cases():
    test5 = crystalline_generation(2, 8)
    test5.set_lattice_type('wurtzite')
    test5.set_cell_shape('hexagonal')
    test5.bulk_struct()
    view(test5.bulk_struct())

test_cases()


#am i copying over the base function of internal generate cell for each of these different structure types?
#or am i calling the function -- rewrite to make it neater 
#what parts of internal generate cell are general and what parts differentiate
# if it is an alloy, amorphous, or crystalline?  -- composition is the difference for alloy and crystalline
#amorphous : 
# long range order of crystals & random positions
#desired_comps can have one or multiple atoms so that can show if its crystalline or
#if there is more than one atom listed maybe its an alloy? --yes 
#and if the line uses .random somewhere its a random/amorphous? --yes 

#where is the overall dictionary of elements and candidates kept? 
#does internal_generate_cell look at Ni with any difference then if you typed Au or Si
#alloy, bulk, amorphous

#test cases

#   # print('desired size in system_sizes')
   # test = crystalline_generation(1,20) 
   # test.set_lattice_type('hcp')
    #test.set_cell_shape('primitive')
    #test.bulk_struct()
    #print('desired size rounded up')
    #test2 = crystalline_generation(2,7)
   # test2.set_lattice_type('hcp')
    #test2.set_cell_shape('primitive')
    #test2.bulk_struct()
    #print('desired size round down')
    #test3 = crystalline_generation(3,3000)
    #test3.set_lattice_type('hcp')
    #test3.set_cell_shape('primitive')
    #test3.bulk_struct()
    #print('diamond')
    #test4 = crystalline_generation(1,8)
    #test4.set_lattice_type('diamond')
    #test4.set_lattice_type('fcc')
    #test4.bulk_struct()